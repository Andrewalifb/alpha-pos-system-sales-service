// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: store.proto

package alpha_pos_system_sales_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosStoreServiceClient is the client API for PosStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosStoreServiceClient interface {
	CreatePosStore(ctx context.Context, in *CreatePosStoreRequest, opts ...grpc.CallOption) (*CreatePosStoreResponse, error)
	ReadPosStore(ctx context.Context, in *ReadPosStoreRequest, opts ...grpc.CallOption) (*ReadPosStoreResponse, error)
	UpdatePosStore(ctx context.Context, in *UpdatePosStoreRequest, opts ...grpc.CallOption) (*UpdatePosStoreResponse, error)
	DeletePosStore(ctx context.Context, in *DeletePosStoreRequest, opts ...grpc.CallOption) (*DeletePosStoreResponse, error)
	ReadAllPosStores(ctx context.Context, in *ReadAllPosStoresRequest, opts ...grpc.CallOption) (*ReadAllPosStoresResponse, error)
	GetNextReceiptID(ctx context.Context, in *GetNextReceiptIDRequest, opts ...grpc.CallOption) (*GetNextReceiptIDResponse, error)
}

type posStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosStoreServiceClient(cc grpc.ClientConnInterface) PosStoreServiceClient {
	return &posStoreServiceClient{cc}
}

func (c *posStoreServiceClient) CreatePosStore(ctx context.Context, in *CreatePosStoreRequest, opts ...grpc.CallOption) (*CreatePosStoreResponse, error) {
	out := new(CreatePosStoreResponse)
	err := c.cc.Invoke(ctx, "/pos.PosStoreService/CreatePosStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posStoreServiceClient) ReadPosStore(ctx context.Context, in *ReadPosStoreRequest, opts ...grpc.CallOption) (*ReadPosStoreResponse, error) {
	out := new(ReadPosStoreResponse)
	err := c.cc.Invoke(ctx, "/pos.PosStoreService/ReadPosStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posStoreServiceClient) UpdatePosStore(ctx context.Context, in *UpdatePosStoreRequest, opts ...grpc.CallOption) (*UpdatePosStoreResponse, error) {
	out := new(UpdatePosStoreResponse)
	err := c.cc.Invoke(ctx, "/pos.PosStoreService/UpdatePosStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posStoreServiceClient) DeletePosStore(ctx context.Context, in *DeletePosStoreRequest, opts ...grpc.CallOption) (*DeletePosStoreResponse, error) {
	out := new(DeletePosStoreResponse)
	err := c.cc.Invoke(ctx, "/pos.PosStoreService/DeletePosStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posStoreServiceClient) ReadAllPosStores(ctx context.Context, in *ReadAllPosStoresRequest, opts ...grpc.CallOption) (*ReadAllPosStoresResponse, error) {
	out := new(ReadAllPosStoresResponse)
	err := c.cc.Invoke(ctx, "/pos.PosStoreService/ReadAllPosStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posStoreServiceClient) GetNextReceiptID(ctx context.Context, in *GetNextReceiptIDRequest, opts ...grpc.CallOption) (*GetNextReceiptIDResponse, error) {
	out := new(GetNextReceiptIDResponse)
	err := c.cc.Invoke(ctx, "/pos.PosStoreService/GetNextReceiptID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosStoreServiceServer is the server API for PosStoreService service.
// All implementations must embed UnimplementedPosStoreServiceServer
// for forward compatibility
type PosStoreServiceServer interface {
	CreatePosStore(context.Context, *CreatePosStoreRequest) (*CreatePosStoreResponse, error)
	ReadPosStore(context.Context, *ReadPosStoreRequest) (*ReadPosStoreResponse, error)
	UpdatePosStore(context.Context, *UpdatePosStoreRequest) (*UpdatePosStoreResponse, error)
	DeletePosStore(context.Context, *DeletePosStoreRequest) (*DeletePosStoreResponse, error)
	ReadAllPosStores(context.Context, *ReadAllPosStoresRequest) (*ReadAllPosStoresResponse, error)
	GetNextReceiptID(context.Context, *GetNextReceiptIDRequest) (*GetNextReceiptIDResponse, error)
	mustEmbedUnimplementedPosStoreServiceServer()
}

// UnimplementedPosStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPosStoreServiceServer struct {
}

func (UnimplementedPosStoreServiceServer) CreatePosStore(context.Context, *CreatePosStoreRequest) (*CreatePosStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosStore not implemented")
}
func (UnimplementedPosStoreServiceServer) ReadPosStore(context.Context, *ReadPosStoreRequest) (*ReadPosStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPosStore not implemented")
}
func (UnimplementedPosStoreServiceServer) UpdatePosStore(context.Context, *UpdatePosStoreRequest) (*UpdatePosStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosStore not implemented")
}
func (UnimplementedPosStoreServiceServer) DeletePosStore(context.Context, *DeletePosStoreRequest) (*DeletePosStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosStore not implemented")
}
func (UnimplementedPosStoreServiceServer) ReadAllPosStores(context.Context, *ReadAllPosStoresRequest) (*ReadAllPosStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllPosStores not implemented")
}
func (UnimplementedPosStoreServiceServer) GetNextReceiptID(context.Context, *GetNextReceiptIDRequest) (*GetNextReceiptIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextReceiptID not implemented")
}
func (UnimplementedPosStoreServiceServer) mustEmbedUnimplementedPosStoreServiceServer() {}

// UnsafePosStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosStoreServiceServer will
// result in compilation errors.
type UnsafePosStoreServiceServer interface {
	mustEmbedUnimplementedPosStoreServiceServer()
}

func RegisterPosStoreServiceServer(s grpc.ServiceRegistrar, srv PosStoreServiceServer) {
	s.RegisterService(&PosStoreService_ServiceDesc, srv)
}

func _PosStoreService_CreatePosStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosStoreServiceServer).CreatePosStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosStoreService/CreatePosStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosStoreServiceServer).CreatePosStore(ctx, req.(*CreatePosStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosStoreService_ReadPosStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPosStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosStoreServiceServer).ReadPosStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosStoreService/ReadPosStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosStoreServiceServer).ReadPosStore(ctx, req.(*ReadPosStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosStoreService_UpdatePosStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosStoreServiceServer).UpdatePosStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosStoreService/UpdatePosStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosStoreServiceServer).UpdatePosStore(ctx, req.(*UpdatePosStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosStoreService_DeletePosStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosStoreServiceServer).DeletePosStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosStoreService/DeletePosStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosStoreServiceServer).DeletePosStore(ctx, req.(*DeletePosStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosStoreService_ReadAllPosStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllPosStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosStoreServiceServer).ReadAllPosStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosStoreService/ReadAllPosStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosStoreServiceServer).ReadAllPosStores(ctx, req.(*ReadAllPosStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosStoreService_GetNextReceiptID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextReceiptIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosStoreServiceServer).GetNextReceiptID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosStoreService/GetNextReceiptID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosStoreServiceServer).GetNextReceiptID(ctx, req.(*GetNextReceiptIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosStoreService_ServiceDesc is the grpc.ServiceDesc for PosStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.PosStoreService",
	HandlerType: (*PosStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePosStore",
			Handler:    _PosStoreService_CreatePosStore_Handler,
		},
		{
			MethodName: "ReadPosStore",
			Handler:    _PosStoreService_ReadPosStore_Handler,
		},
		{
			MethodName: "UpdatePosStore",
			Handler:    _PosStoreService_UpdatePosStore_Handler,
		},
		{
			MethodName: "DeletePosStore",
			Handler:    _PosStoreService_DeletePosStore_Handler,
		},
		{
			MethodName: "ReadAllPosStores",
			Handler:    _PosStoreService_ReadAllPosStores_Handler,
		},
		{
			MethodName: "GetNextReceiptID",
			Handler:    _PosStoreService_GetNextReceiptID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store.proto",
}
