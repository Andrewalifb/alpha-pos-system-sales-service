// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: online_payments.proto

package alpha_pos_system_sales_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosOnlinePaymentServiceClient is the client API for PosOnlinePaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosOnlinePaymentServiceClient interface {
	CreatePosOnlinePayment(ctx context.Context, in *CreatePosOnlinePaymentRequest, opts ...grpc.CallOption) (*CreatePosOnlinePaymentResponse, error)
	ReadPosOnlinePayment(ctx context.Context, in *ReadPosOnlinePaymentRequest, opts ...grpc.CallOption) (*ReadPosOnlinePaymentResponse, error)
	UpdatePosOnlinePayment(ctx context.Context, in *UpdatePosOnlinePaymentRequest, opts ...grpc.CallOption) (*UpdatePosOnlinePaymentResponse, error)
	DeletePosOnlinePayment(ctx context.Context, in *DeletePosOnlinePaymentRequest, opts ...grpc.CallOption) (*DeletePosOnlinePaymentResponse, error)
	ReadAllPosOnlinePayments(ctx context.Context, in *ReadAllPosOnlinePaymentsRequest, opts ...grpc.CallOption) (*ReadAllPosOnlinePaymentsResponse, error)
}

type posOnlinePaymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosOnlinePaymentServiceClient(cc grpc.ClientConnInterface) PosOnlinePaymentServiceClient {
	return &posOnlinePaymentServiceClient{cc}
}

func (c *posOnlinePaymentServiceClient) CreatePosOnlinePayment(ctx context.Context, in *CreatePosOnlinePaymentRequest, opts ...grpc.CallOption) (*CreatePosOnlinePaymentResponse, error) {
	out := new(CreatePosOnlinePaymentResponse)
	err := c.cc.Invoke(ctx, "/pos.PosOnlinePaymentService/CreatePosOnlinePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posOnlinePaymentServiceClient) ReadPosOnlinePayment(ctx context.Context, in *ReadPosOnlinePaymentRequest, opts ...grpc.CallOption) (*ReadPosOnlinePaymentResponse, error) {
	out := new(ReadPosOnlinePaymentResponse)
	err := c.cc.Invoke(ctx, "/pos.PosOnlinePaymentService/ReadPosOnlinePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posOnlinePaymentServiceClient) UpdatePosOnlinePayment(ctx context.Context, in *UpdatePosOnlinePaymentRequest, opts ...grpc.CallOption) (*UpdatePosOnlinePaymentResponse, error) {
	out := new(UpdatePosOnlinePaymentResponse)
	err := c.cc.Invoke(ctx, "/pos.PosOnlinePaymentService/UpdatePosOnlinePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posOnlinePaymentServiceClient) DeletePosOnlinePayment(ctx context.Context, in *DeletePosOnlinePaymentRequest, opts ...grpc.CallOption) (*DeletePosOnlinePaymentResponse, error) {
	out := new(DeletePosOnlinePaymentResponse)
	err := c.cc.Invoke(ctx, "/pos.PosOnlinePaymentService/DeletePosOnlinePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posOnlinePaymentServiceClient) ReadAllPosOnlinePayments(ctx context.Context, in *ReadAllPosOnlinePaymentsRequest, opts ...grpc.CallOption) (*ReadAllPosOnlinePaymentsResponse, error) {
	out := new(ReadAllPosOnlinePaymentsResponse)
	err := c.cc.Invoke(ctx, "/pos.PosOnlinePaymentService/ReadAllPosOnlinePayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosOnlinePaymentServiceServer is the server API for PosOnlinePaymentService service.
// All implementations must embed UnimplementedPosOnlinePaymentServiceServer
// for forward compatibility
type PosOnlinePaymentServiceServer interface {
	CreatePosOnlinePayment(context.Context, *CreatePosOnlinePaymentRequest) (*CreatePosOnlinePaymentResponse, error)
	ReadPosOnlinePayment(context.Context, *ReadPosOnlinePaymentRequest) (*ReadPosOnlinePaymentResponse, error)
	UpdatePosOnlinePayment(context.Context, *UpdatePosOnlinePaymentRequest) (*UpdatePosOnlinePaymentResponse, error)
	DeletePosOnlinePayment(context.Context, *DeletePosOnlinePaymentRequest) (*DeletePosOnlinePaymentResponse, error)
	ReadAllPosOnlinePayments(context.Context, *ReadAllPosOnlinePaymentsRequest) (*ReadAllPosOnlinePaymentsResponse, error)
	mustEmbedUnimplementedPosOnlinePaymentServiceServer()
}

// UnimplementedPosOnlinePaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPosOnlinePaymentServiceServer struct {
}

func (UnimplementedPosOnlinePaymentServiceServer) CreatePosOnlinePayment(context.Context, *CreatePosOnlinePaymentRequest) (*CreatePosOnlinePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosOnlinePayment not implemented")
}
func (UnimplementedPosOnlinePaymentServiceServer) ReadPosOnlinePayment(context.Context, *ReadPosOnlinePaymentRequest) (*ReadPosOnlinePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPosOnlinePayment not implemented")
}
func (UnimplementedPosOnlinePaymentServiceServer) UpdatePosOnlinePayment(context.Context, *UpdatePosOnlinePaymentRequest) (*UpdatePosOnlinePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosOnlinePayment not implemented")
}
func (UnimplementedPosOnlinePaymentServiceServer) DeletePosOnlinePayment(context.Context, *DeletePosOnlinePaymentRequest) (*DeletePosOnlinePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosOnlinePayment not implemented")
}
func (UnimplementedPosOnlinePaymentServiceServer) ReadAllPosOnlinePayments(context.Context, *ReadAllPosOnlinePaymentsRequest) (*ReadAllPosOnlinePaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllPosOnlinePayments not implemented")
}
func (UnimplementedPosOnlinePaymentServiceServer) mustEmbedUnimplementedPosOnlinePaymentServiceServer() {
}

// UnsafePosOnlinePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosOnlinePaymentServiceServer will
// result in compilation errors.
type UnsafePosOnlinePaymentServiceServer interface {
	mustEmbedUnimplementedPosOnlinePaymentServiceServer()
}

func RegisterPosOnlinePaymentServiceServer(s grpc.ServiceRegistrar, srv PosOnlinePaymentServiceServer) {
	s.RegisterService(&PosOnlinePaymentService_ServiceDesc, srv)
}

func _PosOnlinePaymentService_CreatePosOnlinePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosOnlinePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosOnlinePaymentServiceServer).CreatePosOnlinePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosOnlinePaymentService/CreatePosOnlinePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosOnlinePaymentServiceServer).CreatePosOnlinePayment(ctx, req.(*CreatePosOnlinePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosOnlinePaymentService_ReadPosOnlinePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPosOnlinePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosOnlinePaymentServiceServer).ReadPosOnlinePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosOnlinePaymentService/ReadPosOnlinePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosOnlinePaymentServiceServer).ReadPosOnlinePayment(ctx, req.(*ReadPosOnlinePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosOnlinePaymentService_UpdatePosOnlinePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosOnlinePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosOnlinePaymentServiceServer).UpdatePosOnlinePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosOnlinePaymentService/UpdatePosOnlinePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosOnlinePaymentServiceServer).UpdatePosOnlinePayment(ctx, req.(*UpdatePosOnlinePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosOnlinePaymentService_DeletePosOnlinePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosOnlinePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosOnlinePaymentServiceServer).DeletePosOnlinePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosOnlinePaymentService/DeletePosOnlinePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosOnlinePaymentServiceServer).DeletePosOnlinePayment(ctx, req.(*DeletePosOnlinePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosOnlinePaymentService_ReadAllPosOnlinePayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllPosOnlinePaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosOnlinePaymentServiceServer).ReadAllPosOnlinePayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosOnlinePaymentService/ReadAllPosOnlinePayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosOnlinePaymentServiceServer).ReadAllPosOnlinePayments(ctx, req.(*ReadAllPosOnlinePaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosOnlinePaymentService_ServiceDesc is the grpc.ServiceDesc for PosOnlinePaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosOnlinePaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.PosOnlinePaymentService",
	HandlerType: (*PosOnlinePaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePosOnlinePayment",
			Handler:    _PosOnlinePaymentService_CreatePosOnlinePayment_Handler,
		},
		{
			MethodName: "ReadPosOnlinePayment",
			Handler:    _PosOnlinePaymentService_ReadPosOnlinePayment_Handler,
		},
		{
			MethodName: "UpdatePosOnlinePayment",
			Handler:    _PosOnlinePaymentService_UpdatePosOnlinePayment_Handler,
		},
		{
			MethodName: "DeletePosOnlinePayment",
			Handler:    _PosOnlinePaymentService_DeletePosOnlinePayment_Handler,
		},
		{
			MethodName: "ReadAllPosOnlinePayments",
			Handler:    _PosOnlinePaymentService_ReadAllPosOnlinePayments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "online_payments.proto",
}
