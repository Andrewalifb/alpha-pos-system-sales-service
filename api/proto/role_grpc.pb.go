// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: role.proto

package alpha_pos_system_sales_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosRoleServiceClient is the client API for PosRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosRoleServiceClient interface {
	CreatePosRole(ctx context.Context, in *CreatePosRoleRequest, opts ...grpc.CallOption) (*CreatePosRoleResponse, error)
	ReadPosRole(ctx context.Context, in *ReadPosRoleRequest, opts ...grpc.CallOption) (*ReadPosRoleResponse, error)
	UpdatePosRole(ctx context.Context, in *UpdatePosRoleRequest, opts ...grpc.CallOption) (*UpdatePosRoleResponse, error)
	DeletePosRole(ctx context.Context, in *DeletePosRoleRequest, opts ...grpc.CallOption) (*DeletePosRoleResponse, error)
	ReadAllPosRoles(ctx context.Context, in *ReadAllPosRolesRequest, opts ...grpc.CallOption) (*ReadAllPosRolesResponse, error)
}

type posRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosRoleServiceClient(cc grpc.ClientConnInterface) PosRoleServiceClient {
	return &posRoleServiceClient{cc}
}

func (c *posRoleServiceClient) CreatePosRole(ctx context.Context, in *CreatePosRoleRequest, opts ...grpc.CallOption) (*CreatePosRoleResponse, error) {
	out := new(CreatePosRoleResponse)
	err := c.cc.Invoke(ctx, "/pos.PosRoleService/CreatePosRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posRoleServiceClient) ReadPosRole(ctx context.Context, in *ReadPosRoleRequest, opts ...grpc.CallOption) (*ReadPosRoleResponse, error) {
	out := new(ReadPosRoleResponse)
	err := c.cc.Invoke(ctx, "/pos.PosRoleService/ReadPosRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posRoleServiceClient) UpdatePosRole(ctx context.Context, in *UpdatePosRoleRequest, opts ...grpc.CallOption) (*UpdatePosRoleResponse, error) {
	out := new(UpdatePosRoleResponse)
	err := c.cc.Invoke(ctx, "/pos.PosRoleService/UpdatePosRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posRoleServiceClient) DeletePosRole(ctx context.Context, in *DeletePosRoleRequest, opts ...grpc.CallOption) (*DeletePosRoleResponse, error) {
	out := new(DeletePosRoleResponse)
	err := c.cc.Invoke(ctx, "/pos.PosRoleService/DeletePosRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posRoleServiceClient) ReadAllPosRoles(ctx context.Context, in *ReadAllPosRolesRequest, opts ...grpc.CallOption) (*ReadAllPosRolesResponse, error) {
	out := new(ReadAllPosRolesResponse)
	err := c.cc.Invoke(ctx, "/pos.PosRoleService/ReadAllPosRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosRoleServiceServer is the server API for PosRoleService service.
// All implementations must embed UnimplementedPosRoleServiceServer
// for forward compatibility
type PosRoleServiceServer interface {
	CreatePosRole(context.Context, *CreatePosRoleRequest) (*CreatePosRoleResponse, error)
	ReadPosRole(context.Context, *ReadPosRoleRequest) (*ReadPosRoleResponse, error)
	UpdatePosRole(context.Context, *UpdatePosRoleRequest) (*UpdatePosRoleResponse, error)
	DeletePosRole(context.Context, *DeletePosRoleRequest) (*DeletePosRoleResponse, error)
	ReadAllPosRoles(context.Context, *ReadAllPosRolesRequest) (*ReadAllPosRolesResponse, error)
	mustEmbedUnimplementedPosRoleServiceServer()
}

// UnimplementedPosRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPosRoleServiceServer struct {
}

func (UnimplementedPosRoleServiceServer) CreatePosRole(context.Context, *CreatePosRoleRequest) (*CreatePosRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosRole not implemented")
}
func (UnimplementedPosRoleServiceServer) ReadPosRole(context.Context, *ReadPosRoleRequest) (*ReadPosRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPosRole not implemented")
}
func (UnimplementedPosRoleServiceServer) UpdatePosRole(context.Context, *UpdatePosRoleRequest) (*UpdatePosRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosRole not implemented")
}
func (UnimplementedPosRoleServiceServer) DeletePosRole(context.Context, *DeletePosRoleRequest) (*DeletePosRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosRole not implemented")
}
func (UnimplementedPosRoleServiceServer) ReadAllPosRoles(context.Context, *ReadAllPosRolesRequest) (*ReadAllPosRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllPosRoles not implemented")
}
func (UnimplementedPosRoleServiceServer) mustEmbedUnimplementedPosRoleServiceServer() {}

// UnsafePosRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosRoleServiceServer will
// result in compilation errors.
type UnsafePosRoleServiceServer interface {
	mustEmbedUnimplementedPosRoleServiceServer()
}

func RegisterPosRoleServiceServer(s grpc.ServiceRegistrar, srv PosRoleServiceServer) {
	s.RegisterService(&PosRoleService_ServiceDesc, srv)
}

func _PosRoleService_CreatePosRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosRoleServiceServer).CreatePosRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosRoleService/CreatePosRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosRoleServiceServer).CreatePosRole(ctx, req.(*CreatePosRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosRoleService_ReadPosRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPosRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosRoleServiceServer).ReadPosRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosRoleService/ReadPosRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosRoleServiceServer).ReadPosRole(ctx, req.(*ReadPosRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosRoleService_UpdatePosRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosRoleServiceServer).UpdatePosRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosRoleService/UpdatePosRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosRoleServiceServer).UpdatePosRole(ctx, req.(*UpdatePosRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosRoleService_DeletePosRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosRoleServiceServer).DeletePosRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosRoleService/DeletePosRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosRoleServiceServer).DeletePosRole(ctx, req.(*DeletePosRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosRoleService_ReadAllPosRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllPosRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosRoleServiceServer).ReadAllPosRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosRoleService/ReadAllPosRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosRoleServiceServer).ReadAllPosRoles(ctx, req.(*ReadAllPosRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosRoleService_ServiceDesc is the grpc.ServiceDesc for PosRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.PosRoleService",
	HandlerType: (*PosRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePosRole",
			Handler:    _PosRoleService_CreatePosRole_Handler,
		},
		{
			MethodName: "ReadPosRole",
			Handler:    _PosRoleService_ReadPosRole_Handler,
		},
		{
			MethodName: "UpdatePosRole",
			Handler:    _PosRoleService_UpdatePosRole_Handler,
		},
		{
			MethodName: "DeletePosRole",
			Handler:    _PosRoleService_DeletePosRole_Handler,
		},
		{
			MethodName: "ReadAllPosRoles",
			Handler:    _PosRoleService_ReadAllPosRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role.proto",
}
