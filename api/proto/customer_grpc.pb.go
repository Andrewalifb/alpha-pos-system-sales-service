// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: customer.proto

package alpha_pos_system_sales_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosCustomerServiceClient is the client API for PosCustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosCustomerServiceClient interface {
	CreatePosCustomer(ctx context.Context, in *CreatePosCustomerRequest, opts ...grpc.CallOption) (*CreatePosCustomerResponse, error)
	ReadPosCustomer(ctx context.Context, in *ReadPosCustomerRequest, opts ...grpc.CallOption) (*ReadPosCustomerResponse, error)
	UpdatePosCustomer(ctx context.Context, in *UpdatePosCustomerRequest, opts ...grpc.CallOption) (*UpdatePosCustomerResponse, error)
	DeletePosCustomer(ctx context.Context, in *DeletePosCustomerRequest, opts ...grpc.CallOption) (*DeletePosCustomerResponse, error)
	ReadAllPosCustomers(ctx context.Context, in *ReadAllPosCustomersRequest, opts ...grpc.CallOption) (*ReadAllPosCustomersResponse, error)
}

type posCustomerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosCustomerServiceClient(cc grpc.ClientConnInterface) PosCustomerServiceClient {
	return &posCustomerServiceClient{cc}
}

func (c *posCustomerServiceClient) CreatePosCustomer(ctx context.Context, in *CreatePosCustomerRequest, opts ...grpc.CallOption) (*CreatePosCustomerResponse, error) {
	out := new(CreatePosCustomerResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCustomerService/CreatePosCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCustomerServiceClient) ReadPosCustomer(ctx context.Context, in *ReadPosCustomerRequest, opts ...grpc.CallOption) (*ReadPosCustomerResponse, error) {
	out := new(ReadPosCustomerResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCustomerService/ReadPosCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCustomerServiceClient) UpdatePosCustomer(ctx context.Context, in *UpdatePosCustomerRequest, opts ...grpc.CallOption) (*UpdatePosCustomerResponse, error) {
	out := new(UpdatePosCustomerResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCustomerService/UpdatePosCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCustomerServiceClient) DeletePosCustomer(ctx context.Context, in *DeletePosCustomerRequest, opts ...grpc.CallOption) (*DeletePosCustomerResponse, error) {
	out := new(DeletePosCustomerResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCustomerService/DeletePosCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCustomerServiceClient) ReadAllPosCustomers(ctx context.Context, in *ReadAllPosCustomersRequest, opts ...grpc.CallOption) (*ReadAllPosCustomersResponse, error) {
	out := new(ReadAllPosCustomersResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCustomerService/ReadAllPosCustomers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosCustomerServiceServer is the server API for PosCustomerService service.
// All implementations must embed UnimplementedPosCustomerServiceServer
// for forward compatibility
type PosCustomerServiceServer interface {
	CreatePosCustomer(context.Context, *CreatePosCustomerRequest) (*CreatePosCustomerResponse, error)
	ReadPosCustomer(context.Context, *ReadPosCustomerRequest) (*ReadPosCustomerResponse, error)
	UpdatePosCustomer(context.Context, *UpdatePosCustomerRequest) (*UpdatePosCustomerResponse, error)
	DeletePosCustomer(context.Context, *DeletePosCustomerRequest) (*DeletePosCustomerResponse, error)
	ReadAllPosCustomers(context.Context, *ReadAllPosCustomersRequest) (*ReadAllPosCustomersResponse, error)
	mustEmbedUnimplementedPosCustomerServiceServer()
}

// UnimplementedPosCustomerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPosCustomerServiceServer struct {
}

func (UnimplementedPosCustomerServiceServer) CreatePosCustomer(context.Context, *CreatePosCustomerRequest) (*CreatePosCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosCustomer not implemented")
}
func (UnimplementedPosCustomerServiceServer) ReadPosCustomer(context.Context, *ReadPosCustomerRequest) (*ReadPosCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPosCustomer not implemented")
}
func (UnimplementedPosCustomerServiceServer) UpdatePosCustomer(context.Context, *UpdatePosCustomerRequest) (*UpdatePosCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosCustomer not implemented")
}
func (UnimplementedPosCustomerServiceServer) DeletePosCustomer(context.Context, *DeletePosCustomerRequest) (*DeletePosCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosCustomer not implemented")
}
func (UnimplementedPosCustomerServiceServer) ReadAllPosCustomers(context.Context, *ReadAllPosCustomersRequest) (*ReadAllPosCustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllPosCustomers not implemented")
}
func (UnimplementedPosCustomerServiceServer) mustEmbedUnimplementedPosCustomerServiceServer() {}

// UnsafePosCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosCustomerServiceServer will
// result in compilation errors.
type UnsafePosCustomerServiceServer interface {
	mustEmbedUnimplementedPosCustomerServiceServer()
}

func RegisterPosCustomerServiceServer(s grpc.ServiceRegistrar, srv PosCustomerServiceServer) {
	s.RegisterService(&PosCustomerService_ServiceDesc, srv)
}

func _PosCustomerService_CreatePosCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCustomerServiceServer).CreatePosCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCustomerService/CreatePosCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCustomerServiceServer).CreatePosCustomer(ctx, req.(*CreatePosCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCustomerService_ReadPosCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPosCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCustomerServiceServer).ReadPosCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCustomerService/ReadPosCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCustomerServiceServer).ReadPosCustomer(ctx, req.(*ReadPosCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCustomerService_UpdatePosCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCustomerServiceServer).UpdatePosCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCustomerService/UpdatePosCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCustomerServiceServer).UpdatePosCustomer(ctx, req.(*UpdatePosCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCustomerService_DeletePosCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCustomerServiceServer).DeletePosCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCustomerService/DeletePosCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCustomerServiceServer).DeletePosCustomer(ctx, req.(*DeletePosCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCustomerService_ReadAllPosCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllPosCustomersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCustomerServiceServer).ReadAllPosCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCustomerService/ReadAllPosCustomers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCustomerServiceServer).ReadAllPosCustomers(ctx, req.(*ReadAllPosCustomersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosCustomerService_ServiceDesc is the grpc.ServiceDesc for PosCustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosCustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.PosCustomerService",
	HandlerType: (*PosCustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePosCustomer",
			Handler:    _PosCustomerService_CreatePosCustomer_Handler,
		},
		{
			MethodName: "ReadPosCustomer",
			Handler:    _PosCustomerService_ReadPosCustomer_Handler,
		},
		{
			MethodName: "UpdatePosCustomer",
			Handler:    _PosCustomerService_UpdatePosCustomer_Handler,
		},
		{
			MethodName: "DeletePosCustomer",
			Handler:    _PosCustomerService_DeletePosCustomer_Handler,
		},
		{
			MethodName: "ReadAllPosCustomers",
			Handler:    _PosCustomerService_ReadAllPosCustomers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}
