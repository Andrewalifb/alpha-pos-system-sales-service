// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: sales.proto

package alpha_pos_system_sales_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosSaleServiceClient is the client API for PosSaleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosSaleServiceClient interface {
	CreatePosSales(ctx context.Context, in *CreatePosSalesRequest, opts ...grpc.CallOption) (*CreatePosSalesResponse, error)
	ReadPosSale(ctx context.Context, in *ReadPosSaleRequest, opts ...grpc.CallOption) (*ReadPosSaleResponse, error)
	UpdatePosSale(ctx context.Context, in *UpdatePosSaleRequest, opts ...grpc.CallOption) (*UpdatePosSaleResponse, error)
	DeletePosSale(ctx context.Context, in *DeletePosSaleRequest, opts ...grpc.CallOption) (*DeletePosSaleResponse, error)
	ReadAllPosSales(ctx context.Context, in *ReadAllPosSalesRequest, opts ...grpc.CallOption) (*ReadAllPosSalesResponse, error)
}

type posSaleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosSaleServiceClient(cc grpc.ClientConnInterface) PosSaleServiceClient {
	return &posSaleServiceClient{cc}
}

func (c *posSaleServiceClient) CreatePosSales(ctx context.Context, in *CreatePosSalesRequest, opts ...grpc.CallOption) (*CreatePosSalesResponse, error) {
	out := new(CreatePosSalesResponse)
	err := c.cc.Invoke(ctx, "/pos.PosSaleService/CreatePosSales", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posSaleServiceClient) ReadPosSale(ctx context.Context, in *ReadPosSaleRequest, opts ...grpc.CallOption) (*ReadPosSaleResponse, error) {
	out := new(ReadPosSaleResponse)
	err := c.cc.Invoke(ctx, "/pos.PosSaleService/ReadPosSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posSaleServiceClient) UpdatePosSale(ctx context.Context, in *UpdatePosSaleRequest, opts ...grpc.CallOption) (*UpdatePosSaleResponse, error) {
	out := new(UpdatePosSaleResponse)
	err := c.cc.Invoke(ctx, "/pos.PosSaleService/UpdatePosSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posSaleServiceClient) DeletePosSale(ctx context.Context, in *DeletePosSaleRequest, opts ...grpc.CallOption) (*DeletePosSaleResponse, error) {
	out := new(DeletePosSaleResponse)
	err := c.cc.Invoke(ctx, "/pos.PosSaleService/DeletePosSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posSaleServiceClient) ReadAllPosSales(ctx context.Context, in *ReadAllPosSalesRequest, opts ...grpc.CallOption) (*ReadAllPosSalesResponse, error) {
	out := new(ReadAllPosSalesResponse)
	err := c.cc.Invoke(ctx, "/pos.PosSaleService/ReadAllPosSales", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosSaleServiceServer is the server API for PosSaleService service.
// All implementations must embed UnimplementedPosSaleServiceServer
// for forward compatibility
type PosSaleServiceServer interface {
	CreatePosSales(context.Context, *CreatePosSalesRequest) (*CreatePosSalesResponse, error)
	ReadPosSale(context.Context, *ReadPosSaleRequest) (*ReadPosSaleResponse, error)
	UpdatePosSale(context.Context, *UpdatePosSaleRequest) (*UpdatePosSaleResponse, error)
	DeletePosSale(context.Context, *DeletePosSaleRequest) (*DeletePosSaleResponse, error)
	ReadAllPosSales(context.Context, *ReadAllPosSalesRequest) (*ReadAllPosSalesResponse, error)
	mustEmbedUnimplementedPosSaleServiceServer()
}

// UnimplementedPosSaleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPosSaleServiceServer struct {
}

func (UnimplementedPosSaleServiceServer) CreatePosSales(context.Context, *CreatePosSalesRequest) (*CreatePosSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosSales not implemented")
}
func (UnimplementedPosSaleServiceServer) ReadPosSale(context.Context, *ReadPosSaleRequest) (*ReadPosSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPosSale not implemented")
}
func (UnimplementedPosSaleServiceServer) UpdatePosSale(context.Context, *UpdatePosSaleRequest) (*UpdatePosSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosSale not implemented")
}
func (UnimplementedPosSaleServiceServer) DeletePosSale(context.Context, *DeletePosSaleRequest) (*DeletePosSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosSale not implemented")
}
func (UnimplementedPosSaleServiceServer) ReadAllPosSales(context.Context, *ReadAllPosSalesRequest) (*ReadAllPosSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllPosSales not implemented")
}
func (UnimplementedPosSaleServiceServer) mustEmbedUnimplementedPosSaleServiceServer() {}

// UnsafePosSaleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosSaleServiceServer will
// result in compilation errors.
type UnsafePosSaleServiceServer interface {
	mustEmbedUnimplementedPosSaleServiceServer()
}

func RegisterPosSaleServiceServer(s grpc.ServiceRegistrar, srv PosSaleServiceServer) {
	s.RegisterService(&PosSaleService_ServiceDesc, srv)
}

func _PosSaleService_CreatePosSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosSaleServiceServer).CreatePosSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosSaleService/CreatePosSales",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosSaleServiceServer).CreatePosSales(ctx, req.(*CreatePosSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosSaleService_ReadPosSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPosSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosSaleServiceServer).ReadPosSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosSaleService/ReadPosSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosSaleServiceServer).ReadPosSale(ctx, req.(*ReadPosSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosSaleService_UpdatePosSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosSaleServiceServer).UpdatePosSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosSaleService/UpdatePosSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosSaleServiceServer).UpdatePosSale(ctx, req.(*UpdatePosSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosSaleService_DeletePosSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosSaleServiceServer).DeletePosSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosSaleService/DeletePosSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosSaleServiceServer).DeletePosSale(ctx, req.(*DeletePosSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosSaleService_ReadAllPosSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllPosSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosSaleServiceServer).ReadAllPosSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosSaleService/ReadAllPosSales",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosSaleServiceServer).ReadAllPosSales(ctx, req.(*ReadAllPosSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosSaleService_ServiceDesc is the grpc.ServiceDesc for PosSaleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosSaleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.PosSaleService",
	HandlerType: (*PosSaleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePosSales",
			Handler:    _PosSaleService_CreatePosSales_Handler,
		},
		{
			MethodName: "ReadPosSale",
			Handler:    _PosSaleService_ReadPosSale_Handler,
		},
		{
			MethodName: "UpdatePosSale",
			Handler:    _PosSaleService_UpdatePosSale_Handler,
		},
		{
			MethodName: "DeletePosSale",
			Handler:    _PosSaleService_DeletePosSale_Handler,
		},
		{
			MethodName: "ReadAllPosSales",
			Handler:    _PosSaleService_ReadAllPosSales_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sales.proto",
}
