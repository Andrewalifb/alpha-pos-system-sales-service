// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: cash_drawer.proto

package alpha_pos_system_sales_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosCashDrawerServiceClient is the client API for PosCashDrawerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosCashDrawerServiceClient interface {
	CreatePosCashDrawer(ctx context.Context, in *CreatePosCashDrawerRequest, opts ...grpc.CallOption) (*CreatePosCashDrawerResponse, error)
	ReadPosCashDrawer(ctx context.Context, in *ReadPosCashDrawerRequest, opts ...grpc.CallOption) (*ReadPosCashDrawerResponse, error)
	UpdatePosCashDrawer(ctx context.Context, in *UpdatePosCashDrawerRequest, opts ...grpc.CallOption) (*UpdatePosCashDrawerResponse, error)
	DeletePosCashDrawer(ctx context.Context, in *DeletePosCashDrawerRequest, opts ...grpc.CallOption) (*DeletePosCashDrawerResponse, error)
	ReadAllPosCashDrawers(ctx context.Context, in *ReadAllPosCashDrawersRequest, opts ...grpc.CallOption) (*ReadAllPosCashDrawersResponse, error)
}

type posCashDrawerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosCashDrawerServiceClient(cc grpc.ClientConnInterface) PosCashDrawerServiceClient {
	return &posCashDrawerServiceClient{cc}
}

func (c *posCashDrawerServiceClient) CreatePosCashDrawer(ctx context.Context, in *CreatePosCashDrawerRequest, opts ...grpc.CallOption) (*CreatePosCashDrawerResponse, error) {
	out := new(CreatePosCashDrawerResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCashDrawerService/CreatePosCashDrawer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCashDrawerServiceClient) ReadPosCashDrawer(ctx context.Context, in *ReadPosCashDrawerRequest, opts ...grpc.CallOption) (*ReadPosCashDrawerResponse, error) {
	out := new(ReadPosCashDrawerResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCashDrawerService/ReadPosCashDrawer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCashDrawerServiceClient) UpdatePosCashDrawer(ctx context.Context, in *UpdatePosCashDrawerRequest, opts ...grpc.CallOption) (*UpdatePosCashDrawerResponse, error) {
	out := new(UpdatePosCashDrawerResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCashDrawerService/UpdatePosCashDrawer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCashDrawerServiceClient) DeletePosCashDrawer(ctx context.Context, in *DeletePosCashDrawerRequest, opts ...grpc.CallOption) (*DeletePosCashDrawerResponse, error) {
	out := new(DeletePosCashDrawerResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCashDrawerService/DeletePosCashDrawer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCashDrawerServiceClient) ReadAllPosCashDrawers(ctx context.Context, in *ReadAllPosCashDrawersRequest, opts ...grpc.CallOption) (*ReadAllPosCashDrawersResponse, error) {
	out := new(ReadAllPosCashDrawersResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCashDrawerService/ReadAllPosCashDrawers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosCashDrawerServiceServer is the server API for PosCashDrawerService service.
// All implementations must embed UnimplementedPosCashDrawerServiceServer
// for forward compatibility
type PosCashDrawerServiceServer interface {
	CreatePosCashDrawer(context.Context, *CreatePosCashDrawerRequest) (*CreatePosCashDrawerResponse, error)
	ReadPosCashDrawer(context.Context, *ReadPosCashDrawerRequest) (*ReadPosCashDrawerResponse, error)
	UpdatePosCashDrawer(context.Context, *UpdatePosCashDrawerRequest) (*UpdatePosCashDrawerResponse, error)
	DeletePosCashDrawer(context.Context, *DeletePosCashDrawerRequest) (*DeletePosCashDrawerResponse, error)
	ReadAllPosCashDrawers(context.Context, *ReadAllPosCashDrawersRequest) (*ReadAllPosCashDrawersResponse, error)
	mustEmbedUnimplementedPosCashDrawerServiceServer()
}

// UnimplementedPosCashDrawerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPosCashDrawerServiceServer struct {
}

func (UnimplementedPosCashDrawerServiceServer) CreatePosCashDrawer(context.Context, *CreatePosCashDrawerRequest) (*CreatePosCashDrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosCashDrawer not implemented")
}
func (UnimplementedPosCashDrawerServiceServer) ReadPosCashDrawer(context.Context, *ReadPosCashDrawerRequest) (*ReadPosCashDrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPosCashDrawer not implemented")
}
func (UnimplementedPosCashDrawerServiceServer) UpdatePosCashDrawer(context.Context, *UpdatePosCashDrawerRequest) (*UpdatePosCashDrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosCashDrawer not implemented")
}
func (UnimplementedPosCashDrawerServiceServer) DeletePosCashDrawer(context.Context, *DeletePosCashDrawerRequest) (*DeletePosCashDrawerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosCashDrawer not implemented")
}
func (UnimplementedPosCashDrawerServiceServer) ReadAllPosCashDrawers(context.Context, *ReadAllPosCashDrawersRequest) (*ReadAllPosCashDrawersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllPosCashDrawers not implemented")
}
func (UnimplementedPosCashDrawerServiceServer) mustEmbedUnimplementedPosCashDrawerServiceServer() {}

// UnsafePosCashDrawerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosCashDrawerServiceServer will
// result in compilation errors.
type UnsafePosCashDrawerServiceServer interface {
	mustEmbedUnimplementedPosCashDrawerServiceServer()
}

func RegisterPosCashDrawerServiceServer(s grpc.ServiceRegistrar, srv PosCashDrawerServiceServer) {
	s.RegisterService(&PosCashDrawerService_ServiceDesc, srv)
}

func _PosCashDrawerService_CreatePosCashDrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosCashDrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCashDrawerServiceServer).CreatePosCashDrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCashDrawerService/CreatePosCashDrawer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCashDrawerServiceServer).CreatePosCashDrawer(ctx, req.(*CreatePosCashDrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCashDrawerService_ReadPosCashDrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPosCashDrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCashDrawerServiceServer).ReadPosCashDrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCashDrawerService/ReadPosCashDrawer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCashDrawerServiceServer).ReadPosCashDrawer(ctx, req.(*ReadPosCashDrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCashDrawerService_UpdatePosCashDrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosCashDrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCashDrawerServiceServer).UpdatePosCashDrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCashDrawerService/UpdatePosCashDrawer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCashDrawerServiceServer).UpdatePosCashDrawer(ctx, req.(*UpdatePosCashDrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCashDrawerService_DeletePosCashDrawer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosCashDrawerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCashDrawerServiceServer).DeletePosCashDrawer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCashDrawerService/DeletePosCashDrawer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCashDrawerServiceServer).DeletePosCashDrawer(ctx, req.(*DeletePosCashDrawerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCashDrawerService_ReadAllPosCashDrawers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllPosCashDrawersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCashDrawerServiceServer).ReadAllPosCashDrawers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCashDrawerService/ReadAllPosCashDrawers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCashDrawerServiceServer).ReadAllPosCashDrawers(ctx, req.(*ReadAllPosCashDrawersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosCashDrawerService_ServiceDesc is the grpc.ServiceDesc for PosCashDrawerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosCashDrawerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.PosCashDrawerService",
	HandlerType: (*PosCashDrawerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePosCashDrawer",
			Handler:    _PosCashDrawerService_CreatePosCashDrawer_Handler,
		},
		{
			MethodName: "ReadPosCashDrawer",
			Handler:    _PosCashDrawerService_ReadPosCashDrawer_Handler,
		},
		{
			MethodName: "UpdatePosCashDrawer",
			Handler:    _PosCashDrawerService_UpdatePosCashDrawer_Handler,
		},
		{
			MethodName: "DeletePosCashDrawer",
			Handler:    _PosCashDrawerService_DeletePosCashDrawer_Handler,
		},
		{
			MethodName: "ReadAllPosCashDrawers",
			Handler:    _PosCashDrawerService_ReadAllPosCashDrawers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cash_drawer.proto",
}
