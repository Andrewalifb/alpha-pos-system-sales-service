// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: user.proto

package alpha_pos_system_sales_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosUserServiceClient is the client API for PosUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosUserServiceClient interface {
	CreatePosUser(ctx context.Context, in *CreatePosUserRequest, opts ...grpc.CallOption) (*CreatePosUserResponse, error)
	ReadPosUser(ctx context.Context, in *ReadPosUserRequest, opts ...grpc.CallOption) (*ReadPosUserResponse, error)
	UpdatePosUser(ctx context.Context, in *UpdatePosUserRequest, opts ...grpc.CallOption) (*UpdatePosUserResponse, error)
	DeletePosUser(ctx context.Context, in *DeletePosUserRequest, opts ...grpc.CallOption) (*DeletePosUserResponse, error)
	ReadAllPosUsers(ctx context.Context, in *ReadAllPosUsersRequest, opts ...grpc.CallOption) (*ReadAllPosUsersResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type posUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosUserServiceClient(cc grpc.ClientConnInterface) PosUserServiceClient {
	return &posUserServiceClient{cc}
}

func (c *posUserServiceClient) CreatePosUser(ctx context.Context, in *CreatePosUserRequest, opts ...grpc.CallOption) (*CreatePosUserResponse, error) {
	out := new(CreatePosUserResponse)
	err := c.cc.Invoke(ctx, "/pos.PosUserService/CreatePosUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posUserServiceClient) ReadPosUser(ctx context.Context, in *ReadPosUserRequest, opts ...grpc.CallOption) (*ReadPosUserResponse, error) {
	out := new(ReadPosUserResponse)
	err := c.cc.Invoke(ctx, "/pos.PosUserService/ReadPosUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posUserServiceClient) UpdatePosUser(ctx context.Context, in *UpdatePosUserRequest, opts ...grpc.CallOption) (*UpdatePosUserResponse, error) {
	out := new(UpdatePosUserResponse)
	err := c.cc.Invoke(ctx, "/pos.PosUserService/UpdatePosUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posUserServiceClient) DeletePosUser(ctx context.Context, in *DeletePosUserRequest, opts ...grpc.CallOption) (*DeletePosUserResponse, error) {
	out := new(DeletePosUserResponse)
	err := c.cc.Invoke(ctx, "/pos.PosUserService/DeletePosUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posUserServiceClient) ReadAllPosUsers(ctx context.Context, in *ReadAllPosUsersRequest, opts ...grpc.CallOption) (*ReadAllPosUsersResponse, error) {
	out := new(ReadAllPosUsersResponse)
	err := c.cc.Invoke(ctx, "/pos.PosUserService/ReadAllPosUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posUserServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pos.PosUserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosUserServiceServer is the server API for PosUserService service.
// All implementations must embed UnimplementedPosUserServiceServer
// for forward compatibility
type PosUserServiceServer interface {
	CreatePosUser(context.Context, *CreatePosUserRequest) (*CreatePosUserResponse, error)
	ReadPosUser(context.Context, *ReadPosUserRequest) (*ReadPosUserResponse, error)
	UpdatePosUser(context.Context, *UpdatePosUserRequest) (*UpdatePosUserResponse, error)
	DeletePosUser(context.Context, *DeletePosUserRequest) (*DeletePosUserResponse, error)
	ReadAllPosUsers(context.Context, *ReadAllPosUsersRequest) (*ReadAllPosUsersResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedPosUserServiceServer()
}

// UnimplementedPosUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPosUserServiceServer struct {
}

func (UnimplementedPosUserServiceServer) CreatePosUser(context.Context, *CreatePosUserRequest) (*CreatePosUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosUser not implemented")
}
func (UnimplementedPosUserServiceServer) ReadPosUser(context.Context, *ReadPosUserRequest) (*ReadPosUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPosUser not implemented")
}
func (UnimplementedPosUserServiceServer) UpdatePosUser(context.Context, *UpdatePosUserRequest) (*UpdatePosUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosUser not implemented")
}
func (UnimplementedPosUserServiceServer) DeletePosUser(context.Context, *DeletePosUserRequest) (*DeletePosUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosUser not implemented")
}
func (UnimplementedPosUserServiceServer) ReadAllPosUsers(context.Context, *ReadAllPosUsersRequest) (*ReadAllPosUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllPosUsers not implemented")
}
func (UnimplementedPosUserServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPosUserServiceServer) mustEmbedUnimplementedPosUserServiceServer() {}

// UnsafePosUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosUserServiceServer will
// result in compilation errors.
type UnsafePosUserServiceServer interface {
	mustEmbedUnimplementedPosUserServiceServer()
}

func RegisterPosUserServiceServer(s grpc.ServiceRegistrar, srv PosUserServiceServer) {
	s.RegisterService(&PosUserService_ServiceDesc, srv)
}

func _PosUserService_CreatePosUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosUserServiceServer).CreatePosUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosUserService/CreatePosUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosUserServiceServer).CreatePosUser(ctx, req.(*CreatePosUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosUserService_ReadPosUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPosUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosUserServiceServer).ReadPosUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosUserService/ReadPosUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosUserServiceServer).ReadPosUser(ctx, req.(*ReadPosUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosUserService_UpdatePosUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosUserServiceServer).UpdatePosUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosUserService/UpdatePosUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosUserServiceServer).UpdatePosUser(ctx, req.(*UpdatePosUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosUserService_DeletePosUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosUserServiceServer).DeletePosUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosUserService/DeletePosUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosUserServiceServer).DeletePosUser(ctx, req.(*DeletePosUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosUserService_ReadAllPosUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllPosUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosUserServiceServer).ReadAllPosUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosUserService/ReadAllPosUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosUserServiceServer).ReadAllPosUsers(ctx, req.(*ReadAllPosUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosUserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosUserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosUserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosUserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosUserService_ServiceDesc is the grpc.ServiceDesc for PosUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.PosUserService",
	HandlerType: (*PosUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePosUser",
			Handler:    _PosUserService_CreatePosUser_Handler,
		},
		{
			MethodName: "ReadPosUser",
			Handler:    _PosUserService_ReadPosUser_Handler,
		},
		{
			MethodName: "UpdatePosUser",
			Handler:    _PosUserService_UpdatePosUser_Handler,
		},
		{
			MethodName: "DeletePosUser",
			Handler:    _PosUserService_DeletePosUser_Handler,
		},
		{
			MethodName: "ReadAllPosUsers",
			Handler:    _PosUserService_ReadAllPosUsers_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _PosUserService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
